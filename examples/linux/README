
Linux Example
=============

This is a basic example of an application for Linux. This example will send a Beacon with telemetry data every 20 seconds, and will accept 4 commands described as follow:
- Dummy: Sends a dummy message.
- Get Parameter: gets the value of a parammeter in the table by the name.
- Set Parameter: sets the value of a parameter by the name.
- Reboot: reboots the Computer. Needs sudo permissions. Warning will reboot your computer!


This application will host a parameter Table with the following parameters:
- example 			An example int parameter, can be modified and is included in Beacon with id "A".
- time_stamp	 	OBC Timestamp parameter example, is included in Beacon with id "B".	
- beacon_count		Beacon counter, is included in Beacon with id "C".
- beacon_period		Time in ms between Beacons, can be modified, not included in Beacon, default to 20 seconds, to modify the default value see sfsf_config.h.

When running the SFSF App will create the following files:
- beacons.txt: Store Telemetry Data
- log.txt: Store events info.
- params.txt: Store persistent parameters. 


Build the Example:
------------------
To build this example the CMake tool is needed: https://cmake.org/download/
Install with:
~~~
// Ubuntu/Debian
sudo apt-get install cmake
// Arch
sudo pacman -Sy cmake
~~~

Locate the linux example folder with a terminal and run the CMake tool, this will generate a bunch of files:
~~~
cmake CMakeLists.txt  
~~~

Build the source code
~~~
make
~~~



Run the Example:
----------------
The linux example is composed by the SFSF App Example and a Mini Ground Station Example. To achive communication between both softwares in the same machine a virtual serial port is needed, install [tty0tty](https://github.com/freemed/tty0tty) for this:

~~~
git clone https://github.com/freemed/tty0tty
tar xf tty0tty-1.2.tgz
cd tty0tty-1.2/pts
make
~~~

The virtual serial port will be compiled into tty0tty-1.2/pts. Move it into another directory if desired. Run the virtual port and pay attention to its output. Don't end the program or close the terminal!
~~~
./tty0tty &
~~~
The output should be like this:
~~~
$ (/dev/pts/2) <=> (/dev/pts/3)
~~~
This means your computer is hosting two intercomunicated serial ports: "/dev/pts/2" and "/dev/pts/3".

Now run the SFSF App and the Ground Station with the virtual serial ports just created. Run each one in a separated terminal. 
~~~
./ground_station /dev/pts/2
./sfsf_example  /dev/pts/3
~~~

If everything goes well, the ground station should receive Beacons from the SFSF App after some seconds.


Sending Commands to the APP:
----------------------------
Now you can send commands fromo the ground station to the SFSF App. Examples:

**1) Dummy command**

Write in ground station terminal:
~~~
dummy
~~~

Reply:
~~~
> Client: Sending message 0 to server...
> Client: Response from server: OK
~~~

**2) Get Parameter**

Write in ground station terminal:
~~~
get example
~~~

Reply:
~~~
> Client: Sending message 1 to server...
> Client: Response from server: example:0
~~~
In this example, we retrieve the value from the parameter with the name "example", the value can be confirmed from the parameter table printed during SFSF App initialization. 


**3) Set Parameter**

Write in ground station terminal:
~~~
set example,1
~~~

Reply:
~~~
> Client: Sending message 2 to server...
> Client: Response from server: example:ok
~~~
In this example, we set the value from the parameter with the name "example", the value can be confirmed by performing a "get" command for the "example" parameter. 

A more useful example is to set the value of the "beacon_period" parameter. This will change the behaivour of the app:

Write in ground station terminal:
~~~
set beacon_period,5000
~~~

Reply:
~~~
> Client: Sending message 3 to server...
> Client: Response from server: beacon_period:ok
~~~
After this, you will note that the time between beacons will be shorted. **This way we can simplify the control of the flight software by just modifying the parameters, 
instead of writing a command for it.**



---------------------------------
Enjoy ;) 
















